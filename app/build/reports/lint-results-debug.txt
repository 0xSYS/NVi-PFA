/home/0xsys/Desktop/com.qsp.nvpfa_new/app/src/main/AndroidManifest.xml:61: Warning: The Google Play store has a policy that limits usage of MANAGE_EXTERNAL_STORAGE [ScopedStorage]
    <uses-permission android:name="android.permission.MANAGE_EXTERNAL_STORAGE"/>
                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "ScopedStorage":
   Scoped storage is enforced on Android 10+ (or Android 11+ if using
   requestLegacyExternalStorage). In particular, WRITE_EXTERNAL_STORAGE will
   no longer provide write access to all files; it will provide the equivalent
   of READ_EXTERNAL_STORAGE instead.

   As of Android 13, if you need to query or interact with MediaStore or media
   files on the shared storage, you should be using instead one or more new
   storage permissions:
   * android.permission.READ_MEDIA_IMAGES
   * android.permission.READ_MEDIA_VIDEO
   * android.permission.READ_MEDIA_AUDIO

   and then add maxSdkVersion="33" to the older permission. See the developer
   guide for how to do this:
   https://developer.android.com/about/versions/13/behavior-changes-13#granula
   r-media-permissions

   The MANAGE_EXTERNAL_STORAGE permission can be used to manage all files, but
   it is rarely necessary and most apps on Google Play are not allowed to use
   it. Most apps should instead migrate to use scoped storage. To modify or
   delete files, apps should request write access from the user as described
   at https://goo.gle/android-mediastore-createwriterequest.

   To learn more, read these resources: Play policy:
   https://goo.gle/policy-storage-help Allowable use cases:
   https://goo.gle/policy-storage-usecases

   https://goo.gle/android-storage-usecases

/home/0xsys/Desktop/com.qsp.nvpfa_new/app/src/main/java/com/qsp/nvpfa/NvpfaActivity.java:151: Error: Call requires API level 30 (current min is 21): android.os.Environment#isExternalStorageManager [NewApi]
            if (Environment.isExternalStorageManager()) {
                            ~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "NewApi":
   This check scans through all the Android API calls in the application and
   warns about any calls that are not available on all versions targeted by
   this application (according to its minimum SDK attribute in the manifest).

   If you really want to use this API and don't need to support older devices
   just set the minSdkVersion in your build.gradle or AndroidManifest.xml
   files.

   If your code is deliberately accessing newer APIs, and you have ensured
   (e.g. with conditional execution) that this code will only ever be called
   on a supported platform, then you can annotate your class or method with
   the @TargetApi annotation specifying the local minimum SDK to apply, such
   as @TargetApi(11), such that this check considers 11 rather than your
   manifest file's minimum SDK as the required API level.

   If you are deliberately setting android: attributes in style definitions,
   make sure you place this in a values-vNN folder in order to avoid running
   into runtime conflicts on certain devices where manufacturers have added
   custom attributes whose ids conflict with the new ones on later platforms.

   Similarly, you can use tools:targetApi="11" in an XML file to indicate that
   the element will only be inflated in an adequate context.

/home/0xsys/Desktop/com.qsp.nvpfa_new/app/src/main/AndroidManifest.xml:93: Warning: Attribute preferMinimalPostProcessing is only used in API level 30 and higher (current min is 21) [UnusedAttribute]
            android:preferMinimalPostProcessing="true"
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UnusedAttribute":
   This check finds attributes set in XML files that were introduced in a
   version newer than the oldest version targeted by your application (with
   the minSdkVersion attribute).

   This is not an error; the application will simply ignore the attribute.
   However, if the attribute is important to the appearance or functionality
   of your application, you should consider finding an alternative way to
   achieve the same result with only available attributes, and then you can
   optionally create a copy of the layout in a layout-vNN folder which will be
   used on API NN or higher where you can take advantage of the newer
   attribute.

   Note: This check does not only apply to attributes. For example, some tags
   can be unused too, such as the new <tag> element in layouts introduced in
   API 21.

/home/0xsys/Desktop/com.qsp.nvpfa_new/app/src/main/AndroidManifest.xml:89: Warning: Redundant label can be removed [RedundantLabel]
            android:label="@string/app_name"
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "RedundantLabel":
   When an activity does not have a label attribute, it will use the one from
   the application tag. Since the application has already specified the same
   label, the label on this activity can be omitted.

/home/0xsys/Desktop/com.qsp.nvpfa_new/app/build.gradle:85: Warning: A newer version of androidx.core:core than 1.13.0 is available: 1.16.0 [GradleDependency]
        implementation 'androidx.core:core:1.13.0' // 使用最新的版本
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/0xsys/Desktop/com.qsp.nvpfa_new/app/build.gradle:86: Warning: A newer version of androidx.activity:activity-ktx than 1.8.0 is available: 1.10.1 [GradleDependency]
    implementation 'androidx.activity:activity-ktx:1.8.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/0xsys/Desktop/com.qsp.nvpfa_new/app/build.gradle:87: Warning: A newer version of androidx.fragment:fragment-ktx than 1.5.6 is available: 1.8.6 [GradleDependency]
    implementation 'androidx.fragment:fragment-ktx:1.5.6'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "GradleDependency":
   This detector looks for usages of libraries where the version you are using
   is not the current stable release. Using older versions is fine, and there
   are cases where you deliberately want to stick with an older version.
   However, you may simply not be aware that a more recent version is
   available, and that is what this lint check helps find.

/home/0xsys/Desktop/com.qsp.nvpfa_new/app/build.gradle:33: Warning: Missing x86_64 ABI support for ChromeOS [ChromeOsAbiSupport]
            abiFilters 'arm64-v8a'
                       ~~~~~~~~~~~

   Explanation for issues of type "ChromeOsAbiSupport":
   To properly support ChromeOS, your Android application should have an x86
   and/or x86_64 binary as part of the build configuration. To fix the issue,
   ensure your files are properly optimized for ARM; the binary translator
   will then ensure compatibility with x86. Alternatively, add an abiSplit for
   x86 within your build.gradle file and create the required x86
   dependencies.

   https://developer.android.com/ndk/guides/abis

/home/0xsys/Desktop/com.qsp.nvpfa_new/app/src/main/res/values/colors.xml:3: Warning: The resource R.color.colorPrimary appears to be unused [UnusedResources]
    <color name="colorPrimary">#3F51B5</color>
           ~~~~~~~~~~~~~~~~~~~
/home/0xsys/Desktop/com.qsp.nvpfa_new/app/src/main/res/values/colors.xml:4: Warning: The resource R.color.colorPrimaryDark appears to be unused [UnusedResources]
    <color name="colorPrimaryDark">#303F9F</color>
           ~~~~~~~~~~~~~~~~~~~~~~~
/home/0xsys/Desktop/com.qsp.nvpfa_new/app/src/main/res/values/colors.xml:5: Warning: The resource R.color.colorAccent appears to be unused [UnusedResources]
    <color name="colorAccent">#FF4081</color>
           ~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UnusedResources":
   Unused resources make applications larger and slow down builds.


   The unused resource check can ignore tests. If you want to include
   resources that are only referenced from tests, consider packaging them in a
   test source set instead.

   You can include test sources in the unused resource check by setting the
   system property lint.unused-resources.include-tests =true, and to exclude
   them (usually for performance reasons), use
   lint.unused-resources.exclude-tests =true.
   ,

1 errors, 10 warnings
