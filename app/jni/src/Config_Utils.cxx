#ifdef __linux__
    #include <unistd.h>
#endif
#include <SDL3/SDL.h>
#include "extern/cpptoml/cpptoml.h"


//#define NON_ANDROID

#include "Utils.hxx"
#include "Config_Utils.hxx"





/*
Changed my mind bree
I won't use json anymore >:D
*/

void NVConf::WriteConfig(configuration cfg)
{
    auto out_cfg = cpptoml::make_table();
    
    auto audio = cpptoml::make_table();
    
    audio->insert("VoiceCount", cfg.bass_voice_count);
    audio->insert("LastMIDIpath", cfg.last_midi_path);
    audio->insert("DeviceID", cfg.audio_device_index);
    audio->insert("MIDI_Index", cfg.midi_index);
    audio->insert("DefaultPaths", cfg.use_default_paths);
    auto effects = cpptoml::make_table();
    auto vel_filter = cpptoml::make_table();
    vel_filter->insert("enabled", cfg.vel_filter);
    vel_filter->insert("MinVel", cfg.vel_min);
    vel_filter->insert("MaxVel", cfg.vel_max);
    
    effects->insert("VelFilter", vel_filter);
    
    // Insert the "Effects" table into the "Audio" table
    audio->insert("Effects", effects);
    out_cfg->insert("Audio", audio);
    
    auto vis = cpptoml::make_table();
    vis->insert("NoteSpeed", cfg.note_speed);
    vis->insert("LoopColors", cfg.loop_colors);
    vis->insert("OR", cfg.OR);
    out_cfg->insert("Visual", vis);
    
    auto bg_col = cpptoml::make_table();
    bg_col->insert("R", cfg.bg_R);
    bg_col->insert("G", cfg.bg_G);
    bg_col->insert("B", cfg.bg_B);
    bg_col->insert("A", cfg.bg_A);
    out_cfg->insert("BackgroundColor", bg_col);
    
    auto midi_paths_out = cpptoml::make_array();
    
    for (const auto& path : cfg.extra_midi_paths) 
    {
        midi_paths_out->push_back(path);
    }
    
    out_cfg->insert("midi_paths", midi_paths_out);
    
    auto sf_paths_out = cpptoml::make_array();
    
    for (const auto& path : cfg.extra_sf_paths) 
    {
        sf_paths_out->push_back(path);
    }
    
    out_cfg->insert("soundfonts_paths", sf_paths_out);
    
    auto ch_colors = cpptoml::make_array();
    
    for(const auto& color : cfg.channel_colors)
    {
        ch_colors->push_back(color);
    }
    out_cfg->insert("ch_color_array", ch_colors);
    
    std::ofstream out(CONFIG_PATH);
    out << "# This file was created by NVi Piano From Above to store its settings.\n";
    out << "# Do not edit this file unless you know what you're doing!!!\n";
    out << "# Consider modifying it at your own risk.\n\n\n";
    out << (*out_cfg); // cpptoml overloads the << operator
    out.close();
    NVi::info("Config_Utils", "Settings saved\n");
}

NVConf::configuration NVConf::ReadConfig()
{
    NVConf::configuration in_cfg;
    auto cfg = cpptoml::parse_file(CONFIG_PATH);
    
    auto audio = cfg->get_table("Audio");
    in_cfg.bass_voice_count   = *audio->get_as<int>("VoiceCount");
    in_cfg.last_midi_path     = *audio->get_as<std::string>("LastMIDIpath");
    in_cfg.audio_device_index = *audio->get_as<int>("DeviceID");
    in_cfg.midi_index         = *audio->get_as<int>("MIDI_Index");
    in_cfg.use_default_paths  = *audio->get_as<bool>("DefaultPaths");
    
    auto effects = audio->get_table("Effects");
    
    if (effects) 
    {
        auto vel_filter = effects->get_table("VelFilter");
        if (vel_filter) 
        {
            auto enabled = vel_filter->get_as<bool>("enabled");
            auto min_vel = vel_filter->get_as<int>("MinVel");
            auto max_vel = vel_filter->get_as<int>("MaxVel");
        
            in_cfg.vel_min    = *min_vel;
            in_cfg.vel_max    = *max_vel;
            in_cfg.vel_filter = *enabled;
        }
        
    }
    
    auto vis = cfg->get_table("Visual");
    in_cfg.note_speed  = *vis->get_as<int>("NoteSpeed");
    in_cfg.loop_colors = *vis->get_as<bool>("LoopColors");
    in_cfg.OR          = *vis->get_as<bool>("OR");
    
    auto bg_col = cfg->get_table("BackgroundColor");
    in_cfg.bg_R = *bg_col->get_as<int>("R");
    in_cfg.bg_G = *bg_col->get_as<int>("G");
    in_cfg.bg_B = *bg_col->get_as<int>("B");
    in_cfg.bg_A = *bg_col->get_as<int>("A");
    
    auto midi_paths = cfg->get_array_of<std::string>("midi_paths");
    in_cfg.extra_midi_paths = *midi_paths;
    
    auto sf_paths = cfg->get_array_of<std::string>("soundfonts_paths");
    in_cfg.extra_sf_paths = *sf_paths;
    
    auto ch_colors = cfg->get_array_of<int64_t>("ch_color_array");
    
    if (ch_colors && ch_colors->size() == 16) 
    {
        in_cfg.is_custom_ch_colors = true;
        for (size_t i = 0; i < 16; ++i) 
        {
            in_cfg.channel_colors[i] = static_cast<unsigned int>((*ch_colors)[i]);
        }
    } 
    else 
    {
        //in_cfg.use_default_colors = true; // Nah it would make things a whole lot stupid so for now I want to keep it like this. I hope this will never EVER happen
        SDL_ShowSimpleMessageBox(SDL_MESSAGEBOX_WARNING, "Warning!!", "Missing channel Color array !\nFalling back to default color array.", nullptr);
    }
   
    
    return in_cfg;
}


void NVConf::CreateSoundfontList(std::vector<SoundfontItem> lst)
{
    auto out_sf_list= cpptoml::make_table();
    
    auto sf_path = cpptoml::make_array();
    for (const auto& path : lst) 
    {
        sf_path->push_back(path.label);
    }
    
    auto enabled = cpptoml::make_array();
    for(const auto& en : lst)
    {
        enabled->push_back(en.checked);
    }

    out_sf_list->insert("paths", sf_path);
    out_sf_list->insert("enabled_disabled", enabled);
    
    std::ofstream out(SF_LIST);
    if (out.is_open()) 
    {
        out << "# DO NOT EDIT THIS FILE!!!\n";
        out << "# Created by: NVi Piano From Above\n";
        out << "# Description: Contains full paths to soundfont files as well as the enabled soundfonts\n\n\n\n";
        out << (*out_sf_list);
    } 
    else 
    {
        NVi::error("Config_Utils", "Failed to write 'soundfonts.toml'\n");
    }
}

std::vector<SoundfontItem> NVConf::ReadSoundfontList()
{
    std::vector<SoundfontItem> lst;
    auto in_sf_list = cpptoml::parse_file(SF_LIST);
    
    auto paths = in_sf_list->get_array_of<std::string>("paths");
    auto enabled = in_sf_list->get_array_of<bool>("enabled_disabled");
    
    if (!paths || !enabled || paths->size() != enabled->size()) 
    {
        NVi::error("Config_Utils", "Invalid or mismatched arrays in 'soundfonts.toml'\n");
        return lst;
    }
    
    for (size_t i = 0; i < paths->size(); ++i) 
    {
        lst.push_back(SoundfontItem{(*paths)[i], (*enabled)[i]});
    }
    return lst;
}
